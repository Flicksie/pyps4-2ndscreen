#!/bin/bash
# Pushes a new version to PyPi. Run from root directory.
DEV_BRANCH="dev"
MASTER_BRANCH="master"
CURRENT="Already up to date."
USER="$(git config --get user.name)"
ACCESS_TOKEN="$(git config --get user.token)"
repo_url="$(echo $(git config --get remote.origin.url) | grep -Po '.*(?=\.)')"
url="$(echo $repo_url | sed 's\'github.com'\'api.github.com/repos'\g')"
API_URL=$(printf "%s/releases" $url)

VERSION="$(python -m pyps4_2ndscreen.__version__)"

git checkout dev
git reset HEAD
branch="$(git status | head -n 1 | tail -c 4)"
if [[ $branch != $DEV_BRANCH ]];
then
	echo "Branch not on $DEV_BRANCH."
	exit 1
fi
echo "Branch on $DEV_BRANCH."

git_pull="$(git pull)"
if [[ $git_pull != $CURRENT ]];
then
	echo "Branch not up to date."
	exit 1
fi
echo "Branch up to date."

python3 setup.py install

echo "Running Media Art Tests."
test_result="$(script/test_art | head -c 7)"
echo $test_result
if [ $test_result != "Success" ];
then
	read -p "Media Art Test Failed: Continue?: y> " msg_test
	if [ "$msg_test" != "y" ];
	then
		git stash
		exit 1
	fi
fi

git commit -a -m "Update Media Art Test Logs"
git push

echo "Media Art Test Log committed."

git checkout master
git reset HEAD

branch="$(git status | head -n 1 | tail -c 7)"
if [[ $branch != $MASTER_BRANCH ]];
then
	echo "Branch not on $MASTER_BRANCH."
	exit 1
fi
echo "Branch on $MASTER_BRANCH."
git_pull="$(git pull)"
if [[ $git_pull != $CURRENT ]];
then
	echo "Branch not up to date."
	exit 1
fi
echo "Branch up to date."

echo "Merging dev into master."
git merge dev
git push

read -p "Enter release message: " msg

API_JSON="$(printf "{\"tag_name\": \"%s\",\"target_commitish\": \"master\",\"name\": \"%s\",\"body\": \"%s\",\"draft\": false,\"prerelease\": false}" "$VERSION" "$VERSION" "$msg")"
curl -H "Authorization: token $ACCESS_TOKEN" --data "$API_JSON" --url $API_URL

read -p "Upload to pypi?: y> " msg_pypi
if [ "$msg_pypi" == "y" ];
then
	echo "Uploading to pypi."
	rm -rf dist
	rm -rf build
	python3 setup.py sdist bdist_wheel
	python3 -m twine check dist/*
	python3 -m twine upload dist/* --skip-existing
	echo "Uploaded to pypi."
else
	echo "Skipping upload to pypi."
fi

git checkout dev